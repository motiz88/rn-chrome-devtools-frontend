{"version":3,"file":"SamplesHandler.js","sourceRoot":"","sources":["../../../../../../../front_end/models/trace/handlers/SamplesHandler.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright 2022 The Chromium Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style license that can be\n// found in the LICENSE file.\n\nimport * as Platform from '../../../core/platform/platform.js';\nimport * as Types from '../types/types.js';\nimport type * as Protocol from '../../../generated/protocol.js';\nimport {HandlerState} from './types.js';\nimport * as CPUProfile from '../../cpu_profile/cpu_profile.js';\nimport * as Helpers from '../helpers/helpers.js';\n\nconst events =\n    new Map<Types.TraceEvents.ProcessID, Map<Types.TraceEvents.ThreadID, Types.TraceEvents.TraceEventComplete[]>>();\n\nconst profilesInProcess = new Map<Types.TraceEvents.ProcessID, Map<Types.TraceEvents.ThreadID, ProfileData>>();\n\n// The profile head, containing the event's metadata like its start\n// time, comes in a \"Profile\" event. The sample data comes in\n// \"ProfileChunk\" events. We match these ProfileChunks with their head\n// using process and profile ids. However, in order to integrate sample\n// data with trace data, we need the thread id that owns each profile.\n// This thread id is extracted from the head event.\n// For this reason, we have a preprocessed data structure, where events\n// are matched by profile id, which we then finish processing to export\n// events matched by thread id.\nconst preprocessedData = new Map<Types.TraceEvents.ProcessID, Map<Types.TraceEvents.ProfileID, PreprocessedData>>();\n\nlet handlerState = HandlerState.UNINITIALIZED;\n\nexport function buildProfileCalls(): void {\n  for (const [processId, profiles] of preprocessedData) {\n    for (const [profileId, preProcessedData] of profiles) {\n      const threadId = preProcessedData.threadId;\n      if (!preProcessedData.rawProfile.nodes.length || !threadId) {\n        continue;\n      }\n      const trackingStack: Partial<Types.TraceEvents.TraceEventSyntheticProfileCall>[] = [];\n\n      const profileModel = new CPUProfile.CPUProfileDataModel.CPUProfileDataModel(preProcessedData.rawProfile);\n\n      const finalizedData:\n          ProfileData = {rawProfile: preProcessedData.rawProfile, parsedProfile: profileModel, profileCalls: []};\n\n      profileModel.forEachFrame(openFrameCallback, closeFrameCallback);\n      Helpers.Trace.sortTraceEventsInPlace(finalizedData.profileCalls);\n      const dataByThread = Platform.MapUtilities.getWithDefault(profilesInProcess, processId, () => new Map());\n      dataByThread.set(threadId, finalizedData);\n\n      function openFrameCallback(\n          _depth: number, node: CPUProfile.ProfileTreeModel.ProfileNode, timeStampMs: number): void {\n        const ts = Helpers.Timing.millisecondsToMicroseconds(Types.Timing.MilliSeconds(timeStampMs));\n        trackingStack.push({callFrame: node.callFrame, ts, pid: processId, children: [], tid: threadId});\n      }\n      function closeFrameCallback(\n          depth: number, node: CPUProfile.ProfileTreeModel.ProfileNode, _timeStamp: number, durMs: number,\n          selfTimeMs: number): void {\n        const partialProfileCall = trackingStack.pop();\n        if (!partialProfileCall) {\n          return;\n        }\n        const {callFrame, ts, pid, children, tid} = partialProfileCall;\n        if (callFrame === undefined || ts === undefined || pid === undefined || profileId === undefined ||\n            children === undefined || tid === undefined) {\n          return;\n        }\n        const dur = Helpers.Timing.millisecondsToMicroseconds(Types.Timing.MilliSeconds(durMs));\n        const selfTime = Helpers.Timing.millisecondsToMicroseconds(Types.Timing.MilliSeconds(selfTimeMs));\n        const completeProfileCall: Types.TraceEvents.TraceEventSyntheticProfileCall = {\n          callFrame,\n          ts,\n          pid,\n          dur,\n          selfTime,\n          children,\n          ph: Types.TraceEvents.Phase.COMPLETE,\n          cat: '',\n          name: 'ProfileCall',\n          tid,\n          nodeId: node.id,\n        };\n        const parent = trackingStack.at(-1);\n        const calls = finalizedData.profileCalls;\n        calls.push(completeProfileCall);\n        if (!parent) {\n          return;\n        }\n        parent.children = parent.children || [];\n        parent.children.push(completeProfileCall);\n        if (parent.selfTime) {\n          parent.selfTime = Types.Timing.MicroSeconds(parent.selfTime - dur);\n        }\n      }\n    }\n  }\n}\n\nexport function reset(): void {\n  events.clear();\n  preprocessedData.clear();\n  profilesInProcess.clear();\n  handlerState = HandlerState.UNINITIALIZED;\n}\n\nexport function initialize(): void {\n  if (handlerState !== HandlerState.UNINITIALIZED) {\n    throw new Error('Samples Handler was not reset');\n  }\n\n  handlerState = HandlerState.INITIALIZED;\n}\n\nexport function handleEvent(event: Types.TraceEvents.TraceEventData): void {\n  if (handlerState !== HandlerState.INITIALIZED) {\n    throw new Error('Samples Handler is not initialized');\n  }\n\n  if (Types.TraceEvents.isTraceEventProfile(event)) {\n    // Do not use event.args.data.startTime as it is in CLOCK_MONOTONIC domain,\n    // but use profileEvent.ts which has been translated to Perfetto's clock\n    // domain. Also convert from ms to us.\n    // Note: events are collected on a different thread than what's sampled.\n    // The correct process and thread ids are specified by the profile.\n    const profileData = getOrCreatePreProcessedData(event.pid, event.id);\n    profileData.rawProfile.startTime = event.ts;\n    profileData.threadId = event.tid;\n    return;\n  }\n  if (Types.TraceEvents.isTraceEventProfileChunk(event)) {\n    const profileData = getOrCreatePreProcessedData(event.pid, event.id);\n    const cdpProfile = profileData.rawProfile;\n    const nodesAndSamples: Types.TraceEvents.TraceEventPartialProfile|undefined =\n        event.args?.data?.cpuProfile || {samples: []};\n    const samples = nodesAndSamples?.samples || [];\n    const nodes: CPUProfile.CPUProfileDataModel.ExtendedProfileNode[] = [];\n    for (const n of nodesAndSamples?.nodes || []) {\n      const lineNumber = n.callFrame.lineNumber || -1;\n      const columnNumber = n.callFrame.columnNumber || -1;\n      const scriptId = String(n.callFrame.scriptId) as Protocol.Runtime.ScriptId;\n      const url = n.callFrame.url || '';\n      const node = {\n        ...n,\n        callFrame: {\n          ...n.callFrame,\n          url,\n          lineNumber,\n          columnNumber,\n          scriptId,\n        },\n      };\n      nodes.push(node);\n    }\n\n    const timeDeltas = event.args.data?.timeDeltas || [];\n    const lines = event.args.data?.lines || Array(samples.length).fill(0);\n    cdpProfile.nodes.push(...nodes);\n    cdpProfile.samples?.push(...samples);\n    cdpProfile.timeDeltas?.push(...timeDeltas);\n    cdpProfile.lines?.push(...lines);\n    if (cdpProfile.samples && cdpProfile.timeDeltas && cdpProfile.samples.length !== cdpProfile.timeDeltas.length) {\n      console.error('Failed to parse CPU profile.');\n      return;\n    }\n    if (!cdpProfile.endTime && cdpProfile.timeDeltas) {\n      const timeDeltas: number[] = cdpProfile.timeDeltas;\n      cdpProfile.endTime = timeDeltas.reduce((x, y) => x + y, cdpProfile.startTime);\n    }\n    return;\n  }\n}\n\nexport async function finalize(): Promise<void> {\n  if (handlerState !== HandlerState.INITIALIZED) {\n    throw new Error('Samples Handler is not initialized');\n  }\n  buildProfileCalls();\n  handlerState = HandlerState.FINALIZED;\n}\n\nexport function data(): SamplesHandlerData {\n  if (handlerState !== HandlerState.FINALIZED) {\n    throw new Error('Samples Handler is not finalized');\n  }\n\n  return {\n    profilesInProcess: new Map(profilesInProcess),\n  };\n}\n\nfunction getOrCreatePreProcessedData(\n    processId: Types.TraceEvents.ProcessID, profileId: Types.TraceEvents.ProfileID): PreprocessedData {\n  const profileById = Platform.MapUtilities.getWithDefault(preprocessedData, processId, () => new Map());\n  return Platform.MapUtilities.getWithDefault<Types.TraceEvents.ProfileID, PreprocessedData>(\n      profileById, profileId, () => ({\n                                rawProfile: {\n                                  startTime: 0,\n                                  endTime: 0,\n                                  nodes: [],\n                                  samples: [],\n                                  timeDeltas: [],\n                                  lines: [],\n                                },\n                                profileId,\n                              }));\n}\n\nexport interface SamplesHandlerData {\n  profilesInProcess: typeof profilesInProcess;\n}\n\nexport type ProfileData = {\n  rawProfile: CPUProfile.CPUProfileDataModel.ExtendedProfile,\n  parsedProfile: CPUProfile.CPUProfileDataModel.CPUProfileDataModel,\n  profileCalls: Types.TraceEvents.TraceEventSyntheticProfileCall[],\n};\n\ntype PreprocessedData = {\n  rawProfile: CPUProfile.CPUProfileDataModel.ExtendedProfile,\n  threadId?: Types.TraceEvents.ThreadID, profileId: Types.TraceEvents.ProfileID,\n};\n"]}